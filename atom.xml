<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>草木染的博客</title>
  
  <subtitle>约定未来,不忘初心!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-24T04:24:42.579Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LuYitong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>变量提升机制</title>
    <link href="http://yoursite.com/2018/11/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/11/01/变量提升机制/</id>
    <published>2018-11-01T14:21:16.000Z</published>
    <updated>2018-11-24T04:24:42.579Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>变量提升:</p><blockquote><p>当栈内存(作用域)形成,JS代码自上而下执行之前,浏览器首先会把所有带”VAR / FUNCTION”关键字的进行提前地”声明”或者”定义”,这种预先处理机制称为”变量提升”</p></blockquote></li><li><p>声明(declare):</p><blockquote><p>var a  (默认值undefined)</p></blockquote></li><li><p>定义(defined):</p><blockquote><p>a = 12  (定义就是赋值操作)</p></blockquote></li><li><p>变量提升阶段:</p><ul><li>带”VAR”的只声明未定义</li><li>带”FUNCTION”的声明和定义都完成了</li></ul></li></ul><blockquote><p>变量提升只发生在当前作用域(例如:开始加载页面的时候只对全局作用域下的变量进行提升,因为此时函数中存储的都是字符串而已)<br>在全局作用域下声明的函数或者变量是”全局变量”,同理,在私有作用域下声明的变量是”私有变量”[带VAR / FUNCTION 的才是声明]<br>浏览器很懒,做过的事情不会做第二遍;也就是当代码执行遇到创建函数这部分代码后,直接跳过即可(因为在提升阶段就已经完成函数的赋值操作了)<br>私有作用域形成后,也不是立即代码执行,而是先进行变量提升(变量提升前,先形参赋值)<br>在ES3/ES5语法规范中,只有全局作用域和函数执行的私有作用域(栈内存),其它大括号不会形成栈内存</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = <span class="built_in">arguments</span>[i];</span><br><span class="line">        item = <span class="built_in">parseFloat</span>(item);</span><br><span class="line">        !<span class="built_in">isNaN</span>(item) ? total += item : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">12</span>, <span class="number">23</span>, <span class="string">"34"</span>, <span class="string">"AA"</span>));</span><br></pre></td></tr></table></figure><p><img src="./1532922140175.png" alt="Alt text"></p><hr><p><strong>带VAR和不带VAR的区别</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>);  <span class="comment">// true --&gt;在变量提升阶段,在全局作用域中声明了一个变量A,此时就已经把A当做属性赋值给WINDOW了,只不过此时还没有给A赋值,默认值undefined</span></span><br><span class="line"><span class="comment">// in:检测某个属性是否隶属于这个对象</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>;  <span class="comment">// 全局变量值修改,WINDOW的属性值也跟着修改</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 全局变量A :12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">// WINDOW的一个属性名A :12</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">window</span>.a = <span class="number">14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 14</span></span><br><span class="line"><span class="comment">//=&gt;全局变量和WINDOW中的属性存在"映射机制"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>在全局作用域下声明一个变量,也相同于给WINDOW全局对象设置了一个属性,变量的值就是属性值(私有作用域中声明的私有变量和WINDOW没有关系)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不加VAR的本质是WINDOW的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>);  <span class="comment">// false</span></span><br><span class="line">a = <span class="number">12</span>;  <span class="comment">//==&gt; window.a = 12</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);  <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>;  <span class="comment">// 这样写B是带VAR的</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> a = b = <span class="number">12</span>;  <span class="comment">// 这样写B是不带VAR的</span></span><br><span class="line"><span class="comment">//==&gt; var a = 12; b = 12;</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a,b);  <span class="comment">// undefined undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(a,b);  <span class="comment">// undefined 12</span></span><br><span class="line">   <span class="keyword">var</span> a = b = <span class="number">13</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(a,b);  <span class="comment">// 13 13</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a,b);  <span class="comment">//12 13</span></span><br></pre></td></tr></table></figure></p><p><img src="../1532925326770.png" alt="Alt text"></p><blockquote><p>私有作用域中带VAR和不带VAR也有区别<br>1.带VAR的在私有作用域变量提升阶段,都声明为私有变量,和外界没有任何关系<br>2.不带VAR的不是私有变量,会向它的上级作用域查找,看是否为上级的变量;若不是,则继续向上查找,一直找到window为止(这种查找机制叫做”作用域链”),也就是在私有作用域中操作的这个非私有变量,是一直在操作别人的变量</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;变量提升:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当栈内存(作用域)形成,JS代码自上而下执行之前,浏览器首先会把所有带”VAR / FUNCTION”关键字的进行提前地”声明”或者”定义”,这种预先处理机制称为”变量提升”&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>堆栈问题</title>
    <link href="http://yoursite.com/2018/11/01/%E5%A0%86%E6%A0%88%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/01/堆栈问题/</id>
    <published>2018-11-01T13:07:49.000Z</published>
    <updated>2018-11-24T04:19:58.522Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>栈内存:作用域</strong><ul><li>1.提供一个供JS代码自上而下执行的环境(代码都是在栈内存中执行的)</li><li>2.由于基本数据值比较简单,它们都是直接在栈内存中开辟一个位置,把值直接存储进去的</li><li>当栈内存被销毁时,存储的那些基本值也都跟着销毁了</li></ul></li><li><strong>堆内存:引用值对应的空间</strong><ul><li>1.存储引用数据类型值(对象:键值对; 函数:代码字符串)</li><li>当前堆内存释放销毁,那么这个引用值彻底消失</li><li>2.堆内存的释放:当堆内存没有被任何的变量或者其它东西所占用,浏览器会在空闲的时候,自主地进行内存回收,把所有不被占用的堆内存销毁掉(谷歌浏览器)</li><li>xxx = null :通过空对象指针null可以让原始变量(或者其它东西)谁都不指向,那么原有被占用的堆内存就没有东西占用了,浏览器会销毁它</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;栈内存:作用域&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;1.提供一个供JS代码自上而下执行的环境(代码都是在栈内存中执行的)&lt;/li&gt;
&lt;li&gt;2.由于基本数据值比较简单,它们都是直接在栈内存中开辟一个位置,把值直接存储进去的&lt;/li&gt;
&lt;li&gt;当栈内
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>我个人博客的第一篇博客，哈哈哈...</title>
    <link href="http://yoursite.com/2018/11/01/%E6%88%91%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%93%88%E5%93%88%E5%93%88/"/>
    <id>http://yoursite.com/2018/11/01/我个人博客的第一篇博客，哈哈哈/</id>
    <published>2018-11-01T02:02:15.000Z</published>
    <updated>2018-11-24T04:22:49.917Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
